user www-data;
worker_processes 16;
pid /var/run/nginx.pid;

events {
        worker_connections 8192;
        multi_accept on;

        # kqueue (FreeBSD 4.1+), epoll (Linux 2.6+), rt signals (Linux 2.2.19+)
        # /dev/poll (Solaris 7 11/99+), event ports (Solaris 10), select, and poll
        use epoll;
        #use kqueue;
}

http {
        include mime.types;

        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        types_hash_max_size 2048;
        keepalive_timeout 65;

	# steamcache.net
	resolver 109.228.3.24;
        resolver_timeout 30s;

        log_format custom-default '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" DEFAULT';
        log_format custom-other '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" OTHER';
        log_format custom-local '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" LOCAL';
        log_format custom-remote '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" REMOTE';

        # You may wish to limit the "speed of transmission of the answer to client"
        # in order to support more clients simultaneously. However it's probably
        # sensible to only impose the limit after a set amount of data has been
        # sent (per request); this results in small files being fast (most requests)
        # and large files being non-intrusive (aka slower).
        limit_rate_after 10m;
        limit_rate 2048k;

        proxy_cache_path  /var/www/cache/CS levels=1:2 keys_zone=CS:10m
                           inactive=72h max_size=1g;

        proxy_cache_path  /var/www/cache/OTHER levels=2:2 keys_zone=OTHER:100m
                           inactive=72h max_size=1g;

        proxy_cache_key "$scheme$host$request_uri$cookie_user";

		# Prevent steam crash logs from being submitted to valve - just
		# in case our man in the middle reverse proxy is the cause.
        server {
                listen 0.0.0.0:80;
                server_name crash.steampowered.com;

                location / {
                        satisfy all;
                        deny all;

                        access_log /var/log/nginx/crash.steampowered.com-access.log;
                        error_log /var/log/nginx/crash.steampowered.com-error.log;
                }
        }

		# Cache the main steam content servers - this is the important bit
        server {
                listen 0.0.0.0:80;
                server_name *.cs.steampowered.com;

		access_log /var/log/nginx/steampowered.com-access.log custom-default;
                error_log /var/log/nginx/cs.steampowered.com-error.log;

                root /var/www/cs.steampowered.com/;

                location /depot/ {
                        try_files $uri @mirror;

			access_log /var/log/nginx/steampowered.com-access.log custom-local;
                }

                location / {
                        proxy_next_upstream error timeout http_404;
                        proxy_pass http://$host$uri;
                        proxy_redirect off;

                        proxy_set_header Host $host;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                        proxy_cache CS;
                        proxy_cache_valid 200 301 302 10m;
                        proxy_cache_valid any 1m;
                        proxy_cache_use_stale   error timeout invalid_header updating
                                                 http_500 http_502 http_503 http_504;

                        add_header Host $host;
                        add_header X-Mirror-Upstream-Status $upstream_status;
                        add_header X-Mirror-Upstream-Response-Time $upstream_response_time;
                        add_header X-Mirror-Status $upstream_cache_status;

			access_log /var/log/nginx/steampowered.com-access.log custom-other;
                }

                location @mirror {
                        proxy_store on;
                        proxy_store_access user:rw group:rw all:r;
                        proxy_next_upstream error timeout http_404;
                        proxy_pass http://$host$uri;
                        proxy_redirect off;

                        proxy_set_header Host $host;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                        add_header Host $host;
                        add_header X-Mirror-Upstream-Status $upstream_status;
                        add_header X-Mirror-Upstream-Response-Time $upstream_response_time;
                        add_header X-Mirror-Status $upstream_cache_status;

			access_log /var/log/nginx/steampowered.com-access.log custom-remote;
                }
        }

		# All non game content server content can be cached here,
		#  as long as DNS is pointing at this nginx server.
        server {
                listen 0.0.0.0:80;
                server_name *.steampowered.com;

                access_log /var/log/nginx/steampowered.com-access.log custom-other;
                error_log /var/log/nginx/steampowered.com-error.log;

                location / {
                        proxy_next_upstream error timeout http_404;
                        proxy_pass http://$host$uri;
                        proxy_redirect off;

                        proxy_set_header Host $host;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                        proxy_cache OTHER;
                        proxy_cache_valid 200 301 302 10m;
                        proxy_cache_valid any 1m;
                        proxy_cache_use_stale   error timeout invalid_header updating
                                                 http_500 http_502 http_503 http_504;

                        add_header Host $host;
                        add_header X-Mirror-Upstream-Status $upstream_status;
                        add_header X-Mirror-Upstream-Response-Time $upstream_response_time;
                        add_header X-Mirror-Status $upstream_cache_status;
                }
        }

		# Serve up default web root folder for unrecognised hosts, you
		#  should put something informative here, such as an error message.
        server {
                listen 0.0.0.0:80 default;

                location / {
                        root /var/www/;

                        add_header Host $host;
                }
        }
}
